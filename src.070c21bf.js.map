{"version":3,"sources":["js/async.js","index.js"],"names":["BASE_URL","path","url","getBook","responce","fetch","json","console","log","error","book","obj","title","author","genres","rating","options","method","headers","body","JSON","stringify","addBook","updateBook","update","bookId","putBook","deleteBook","loadJson","response","status","Error","catch","alert"],"mappings":";AAAA,MAAMA,EAAY,wBAClB,IAAIC,EAAQ,SAERC,EAAMF,EAAWC,EAKrB,eAAeE,IACT,IACIC,MAAAA,QAAiBC,MAAMH,SACVE,EAASE,OAC5B,MACAC,QAAQC,IAAIC,OAEPC,OAAAA,KAXTH,QAAQC,IAAIN,GAiBZ,MAAMS,EAAM,CACVC,MAAO,mBACPC,OAAQ,mBACRC,OAAQ,CAAC,YACTC,OAAQ,IAGJC,EAAU,CACdC,OAAQ,OACRC,QAAS,CACS,eAAA,oBAElBC,KAAMC,KAAKC,UAAUV,IAEvB,eAAeW,IACT,IACIlB,MAAAA,QAAiBC,MAAMH,EAAKc,SACfZ,EAASE,OAC5B,MACAC,QAAQC,IAAIC,OAGPC,OAAAA,KAMT,eAAea,EAAWC,EAAQC,GAC1BT,MAAAA,EAAU,CACdC,OAAQ,QACRC,QAAS,CACS,eAAA,oBAElBC,KAAMC,KAAKC,UAAUG,IAEnB,IACIpB,MAAAA,QAAiBC,SAASH,KAAOuB,IAAUT,SAC9BZ,EAASE,OAC5B,MACAC,QAAQC,IAAIC,QAQhB,eAAeiB,EAAQF,EAAQC,GACvBT,MAAAA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACS,eAAA,qBAGhB,IACId,MAAAA,QAAiBC,SAASH,KAAOuB,IAAUT,SAC9BZ,EAASE,OAC5B,MACAC,QAAQC,IAAIC,OAEPC,OAAAA,KAOT,eAAeiB,EAAWF,GACpBT,MAAAA,EAAQ,CACVC,OAAO,SACPC,QAAQ,CACY,eAAA,qBAGrB,IACOd,MAAAA,QAAiBC,SAASH,KAAOuB,IAAUT,SAC9BZ,EAASE,OAE/B,MACGC,QAAQC,IAAIC,QAYhB,eAAemB,EAAS1B,GACjB,IACO2B,MAAAA,QAAiBxB,MAAMH,GACzB2B,GAAmB,KAAnBA,EAASC,OAAc,OACJ1B,SAASE,QAGnC,MACS,MAAA,IAAIyB,MAAMF,EAASC,SAxDjCP,EAAW,CAAER,OAAQ,GAAO,IA6D1Ba,EAAS,qBACNI,MAAMC;;AC7HX,aAAA,QAAA","file":"src.070c21bf.js","sourceRoot":"../src","sourcesContent":["const BASE_URL = `http://localhost:3004`;\nlet path = `/books`;\n\nlet url = BASE_URL + path;\nconsole.log(url);\n\n// GET\n\nasync function getBook() {\n  try {\n    const responce = await fetch(url);\n    const book = await responce.json();\n  } catch {\n    console.log(error);\n  }\n  return book;\n}\n// getBook()\n\n// POST\n\nconst obj = {\n  title: 'Унесенные ветром',\n  author: 'Маргарет Митчелл',\n  genres: ['классика'],\n  rating: 10.0,\n};\n\nconst options = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(obj),\n};\nasync function addBook() {\n  try {\n    const responce = await fetch(url, options);\n    const book = await responce.json();\n  } catch {\n    console.log(error);\n  }\n\n  return book;\n}\n// addBook()\n\n// PATCH\n\nasync function updateBook(update, bookId) {\n  const options = {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(update),\n  };\n  try {\n    const responce = await fetch(`${url}/${bookId}`, options);\n    const book = await responce.json();\n  } catch {\n    console.log(error);\n  }\n}\n// getBook()\nupdateBook({ rating: 2.0 }, 10);\n\n// PUT\n\nasync function putBook(update, bookId) {\n  const options = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    const responce = await fetch(`${url}/${bookId}`, options);\n    const book = await responce.json();\n  } catch {\n    console.log(error);\n  }\n  return book;\n}\n// putBook({ title: 'Унесенные ветром - моя любимая книга' }, 11);\n// getBook();\n\n// DELETE\n\nasync function deleteBook(bookId){\nconst options={\n    method:'DELETE',\n    headers:{\n        'Content-Type': 'application/json',\n    }\n};\ntry{\n    const responce = await fetch(`${url}/${bookId}`, options);\n    const book = await responce.json();\n    \n}catch{\n    console.log(error);\n}\n\n}\n// deleteBook(9)\n\n// getBook()\n\n\n\n// task\n\nasync function loadJson(url) {\n    try{\n        const response = await fetch(url);\n        if (response.status == 200){\n            const load = await responce.json()\n        }\n       \n    }catch{\n        throw new Error(response.status);\n    }\n \n  }\n  \n  loadJson('no-such-user.json') // (3)\n    .catch(alert); // Error: 404","// import './sass/main.scss';\n// import './js/crud.js';\nimport './js/async.js';\n"]}